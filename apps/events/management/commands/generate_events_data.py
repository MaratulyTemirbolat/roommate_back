# Python
from datetime import datetime
from typing import (
    Any,
    Tuple,
    Dict,
)

# Django
from django.core.management.base import BaseCommand

# Project
from events.models import (
    Category,
    SubCategory,
)


class Command(BaseCommand):
    """Custom command for filling up database."""

    __CATEGORIES = {
        "Спорт и физическая активность": [
            "футбол",
            "баскетбол",
            "теннис",
            "бег",
            "йога",
            "плавание",
            "бокс",
            "каратэ",
            "тайский бокс",
            "дзюдо",
            "самбо",
            "гольф",
            "фитнес",
            "велоспорт",
            "водные виды спорта",
        ],
        "Искусство и рукоделие": [
            "живопись",
            "скульптура",
            "фотография",
            "рисование",
            "рукоделие",
            "вышивка",
            "графика",
            "Керамика",
            "Шитье",
            "Ювелирное дело",
        ],
        "Музыка и музыкальные инструменты": [
            "гитара",
            "фортепиано",
            "скрипка",
            "пение",
            "Ударные инструменты",
            "Электронная музыка",
            "Дирижирование",
            "Музыкальная теория и композиция",
            "джаз",
            "рок"
        ],
        "Гастрономия и кулинария": [
            "Готовка",
            "Выпечка",
            "Суши",
            "Вегетарианская кухня",
            "Дегустация вин",
            "Кофейные рецепты",
            "Гастрономические эксперименты",
            "Кулинарные школы",
            "Ресторанный бизнес",
            "Кулинарные книги",
        ],
        "Наука и технологии": [
            "Астрономия",
            "Биология",
            "Физика",
            "Программирование",
            "Робототехника",
            "Геология",
            "Медицина и здравоохранение",
            "Космос",
            "Инженерия",
            "Научная фантастика",
        ],
        "Путешествия и приключения": [
            "пешие походы",
            "горные восхождения",
            "путешествия на велосипеде",
            "Путешествия на автомобиле",
            "Путешествия на водных судах",
            "Экотуризм",
            "Путешествия по городам",
            "Культурные экскурсии",
            "Путешествия с палатками",
            "Фотоэкспедиции",
            "кемпинг",
            "путешествия по городам",
        ],
        "Литература и чтение": [
            "Классическая литература",
            "Фантастика",
            "Детская литература",
            "Драматургия",
            "Поэзия",
            "Книжные клубы",
            "Писательская деятельность",
            "Книжные рецензии",
            "Сценарии",
        ],
        "Садоводство и огородничество": [
            "Уход за цветами",
            "Овощеводство",
            "Плодоводство",
            "Ландшафтный дизайн",
            "Садовые и огородные инструменты",
            "Экологическое садоводство",
            "Садовые форумы",
            "Цветочные выставки",
            "Огородные дневники",
        ],
        "Игры и настольные развлечения": [
            "Шахматы",
            "Настольные игры",
            "Видеоигры",
            "Карточные игры",
            "Ролевые игры (RPG)",
            "Головоломки",
            "Фигурное моделирование",
            "Коллекционирование игрушек",
        ],
        "Социальная деятельность и волонтёрство": [
            "Волонтёрство",
            "Социальная поддержка",
            "Экологические инициативы",
            "Общественные организации",
            "Политическая активность",
            "Благотворительность",
            "Образовательные проекты",
        ],
    }

    def generate_categories_sub_categ(self) -> None:
        """Generate main categories."""
        category: Category

        category_name: str
        for category_name in self.__CATEGORIES:
            category = Category.objects.get_or_create(name=category_name)[0]

            sub_category_name: str
            for sub_category_name in self.__CATEGORIES[category_name]:
                SubCategory.objects.get_or_create(
                    name=sub_category_name,
                    main_category=category
                )
        print("Все Категории и Подкатегории были успешно созданы")

    def __init__(self, *args: Tuple[Any], **kwargs: Dict[str, Any]) -> None:
        """Call parent constructor."""
        super().__init__(args, kwargs)

    def handle(self, *args: Tuple[Any], **options: Dict[str, Any]) -> None:
        """Handle data filling."""
        start_time: datetime = datetime.now()

        self.generate_categories_sub_categ()

        # Events app data generation
        print(
            "Генерация данных составила: {} секунд".format(
                (datetime.now()-start_time).total_seconds()
            )
        )
